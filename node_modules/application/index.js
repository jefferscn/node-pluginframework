/**
 * New node file
 */
var fs = require('fs');
var underscore= require('underscore');
var connect=require('express/node_modules/connect');
var Router = require('express/lib/router');
var Route = require('express/lib/router/route');
var methods = require('express/node_modules/methods');
var utils=connect.utils;
var app=exports=module.exports={};

app.initPluginSystem=function(cb){
	this._usedRouter= true;

	this.loadPlugins();

	this.initDatabase(require(this.get('db')),underscore.bind(function(){
		this.initPlugins();
		this.use(this.router);
		this.get('/site/:page', this.defaultRender);
		if(cb){
			cb();
		}
	},this));
};

app.init=function(){
	this.cache={};
	this.settings={};
	this.engines={};
	this.plugins=[];
	this.widgets={};
	this.actions={};
	this.pages={};
	this.dbModel={};
	this.defaultConfiguration();
	this.viewMappings={};
};

app.defaultRender = function(req, res){
  var page  =  req.params.page;
  var app = req.app;
  var pgCfg = app.pages[page];
  var targetCfg = underscore.clone(app.defaultLayout.params);
  if(!pgCfg){
	  pgCfg = {
			  layout:{
				  content:'pagenotexist'
			  }
	  };
  }
  underscore.extend(targetCfg,pgCfg.layout);
  res.render(app.defaultLayout.view,targetCfg);
};

app.initDatabase=function(schema,cb){
	this.dbSchema = schema;
	for(var key in this.dbModel){
		this.dbSchema.define(key,this.dbModel[key]);
	}
	this.dbSchema.isActual(function(err, actual) {
//	    if (!actual) {
	    schema.autoupdate(cb);
//	    }
	});
};

app.isPluginInited=function(name){
	var plugin = this.findPlugin(name);
	if(plugin && plugin.status=='inited'){
		return true;
	}
	return false;
};
app.initPlugins=function(name){
	var plugin = this.findPlugin(name);
	if(plugin==null)
		return;
	if(plugin.status=='inited')
		return;
	try{
		if(plugin.dependencies){
			for(var i=0;i<plugin.dependencies.length;i++){
				this.initPlugin(plugin.dependencies[i]);
				if(!this.isPluginInited(plugin.dependencies[i],true)){
					throw 'depencency plugin ' + plugin.dependencies[i] + " init failed!";
				}
			}
		}
		if(plugin.pluginObject && plugin.status=="loaded")
			plugin.pluginObject.init(this);
			plugin.status = "inited";
			plugin.msg="";
	}catch(ex){
		plugin.status="init fail";
		plugin.msg = ex;
		//如果出现错误，需要不插件对应的所有actions,widget,page都删除
		this.unloadPlugin(name);
	}
};

app.findWidget=function(name){
	return underscore.find(this.widgets,function(item){
		return item.name==name;
	});
};

app.unloadPlugin=function(name){
	var widgets = underscore.filter(this.widgets,function(item){
		return item.plugin==name;
	});
	underscore.each(widgets,function(item){
		this.removeRouteMapping('get','/widget/' + item.name);
	},this);
	var actions = underscore.filter(this.actions,function(item){
		return item.plugin==name;
	});
	underscore.each(actions,function(item){
		this.removeRouteMapping('post','/action/' + item.name);
	},this);
	var pages = underscore.reject(this.pages,function(item){
		return item.plugin==name;
	});
};

app.initPlugins=function(){
	underscore.each(this.plugins,function(plugin){
		try{
			if(plugin.pluginObject && plugin.status=="loaded")
				plugin.pluginObject.init(this);
				plugin.status = "inited";
				plugin.msg="";
		}catch(ex){
			plugin.status="init fail";
			plugin.msg = ex;
		}
	},this);
};

app.removeRouteMapping=function(method,path){
	underscore.reject(this.routes[method],function(item){
		return item.path== path;
	},this);
};

app.findPlugin=function(name){
	return underscore.find(this.plugins,function(item){
		return item.name==name;
	});
};

app.isPluginLoaded=function(name,checkstatus){
	var plugin =  this.findPlugin(name);
	if(checkstatus)
		return plugin!=null && plugin.status=='loaded';
	return plugin!=null;
};

app.loadPlugin=function(filename){
	if(this.isPluginLoaded(filename,false))
		return;
	var stat = fs.statSync('./plugins/' + filename);
	if(stat.isDirectory()){
		try{
			var pluginInitFile = __dirname+ '/../../plugins/' + filename + '/init';
			var plugin = require(pluginInitFile);
			if(plugin.dependencies){
				for(var i=0;i<plugin.dependencies.length;i++){
					this.loadPlugin(plugin.dependencies[i]);
					if(!this.isPluginLoaded(plugin.dependencies[i],true)){
						throw 'depencency plugin ' + plugin.dependencies[i] + " missing!";
					}
				}
			}
			//plugin.init(this);
			if(plugin.actions){
				underscore.each(plugin.actions,function(item){
					if(this.actions[item.name]){
						this.actions[item.name].status='replaced';
						this.removeRouteMapping('post','/action/' + item.name);
					};
					this.actions[item.name]={
						name:item.name,
						plugin:filename,
						route:item.route,
						privacy:item.privacy,
						status:'enabled',
						url:'/action/'+ item.name
					};
					this.post('/action/'+ item.name,item.route);
				},this);
			}
			if(plugin.widgets){
				underscore.each(plugin.widgets,function(item){
					if(this.widgets[item.name]){
						this.widgets[item.name].status='replaced';
						this.removeRouteMapping('get','/widget/' + item.name);
					};
					this.widgets[item.name]={
						name:item.name,
						plugin:filename,
						complex:item.complex?item.complex:false,
						layout:item.layout,
						route:item.route,
						privacy:item.privacy,
						status:'enabled',
						url:item.path || '/widget/'+ item.name
					};
					if(item.route)
						this.get(this.widgets[item.name].url,item.route);
					else
						throw 'widget:' + item.name + ' route is null';
				},this);
			}
			if(plugin.pages){
				underscore.each(plugin.pages,function(item){
					this.pages[item.name]={
						name:item.name,
						plugin:filename,
						privacy:item.privacy,
						layout:underscore.clone(item.layout),
						url:item.path || '/site/' + item.name
					};
				},this);
			}
			if(plugin.dbModel){
				for(var key in plugin.dbModel){
					if(!this.dbModel[key]){
						this.dbModel[key] = plugin.dbModel[key];
					}else{
						underscore.extend(this.dbModel[key],plugin.dbModel[key]);
					}
				}
			}
			if(this.plugins){
				this.plugins.push({
					name : filename,
					pluginObject:plugin,
					dependencies:plugin.depencencies,
					path : __dirname+ '/../../plugins/' + filename,
					status:'loaded',
					msg:''
				});
			}
		}catch(ex){
			console.error('plugin' + filename + ' init fail');
			console.error(ex);
			if(this.plugins){
				this.plugins.push({
					name : filename,
					pluginObject:null,
					dependencies:plugin.dependencies,
					path : __dirname+ '/../../plugins/' + filename,
					status:'load fail',
					msg:ex
				});
			}
		}
	}
};

app.loadPlugins=function(){
	fs.readdirSync('./plugins').forEach(function(filename){
		this.loadPlugin(filename);
	},this);
};

app.getPluginPath=function(plugin){
	return __dirname + '/../../plugins/'+ plugin;
};

app.isPluginView = function(name){
	return /^[^.]*\./.test(name);
};

app.getPluginName=function(name){
	return name.match(/(^[^.]*)\./)[1];
};

app.getViewName = function(name){
	return name.replace(/^[^.]*\./,'');
};

app.render = function(name, options, fn){
	  var opts = {}
	    , cache = this.cache
	    , engines = this.engines
	    , view;

	  // support callback function as second arg
	  if ('function' == typeof options) {
	    fn = options, options = {};
	  }

	  // merge app.locals
	  utils.merge(opts, this.locals);

	  // merge options._locals
	  if (options._locals) utils.merge(opts, options._locals);

	  // merge options
	  utils.merge(opts, options);

	  // set .cache unless explicitly provided
	  opts.cache = null == opts.cache
	    ? this.enabled('view cache')
	    : opts.cache;

	  // primed cache
	  if (opts.cache) view = cache[name];
	  
	  var viewRootPath = this.get('views');
	  if(this.viewMappings[name]){
		  name = this.viewMappings[name];
	  }
	  var originalName = name;
	  if(this.isPluginView(name)){
		  var pluginName = this.getPluginName(name);
		  viewRootPath = this.getPluginPath(pluginName);
		  viewRootPath= viewRootPath + '/views';
		  name = this.getViewName(name);
	  }
	  // view
	  if (!view) {
	    view = new (this.get('view'))(name, {
	      defaultEngine: this.get('view engine'),
	      root: viewRootPath,
	      engines: engines
	    });

	    if (!view.path) {
	      var err = new Error('Failed to lookup view "' + name + '" in views directory "' + view.root + '"');
	      err.view = view;
	      return fn(err);
	    }

	    // prime the cache
	    if (opts.cache) cache[originalName] = view;
	  }

	  // render
	  try {
	    view.render(opts, fn);
	  } catch (err) {
	    fn(err);
	  }
	};